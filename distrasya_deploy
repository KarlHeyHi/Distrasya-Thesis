import cv2
import numpy as np
import time
import tensorflow as tf


np.set_printoptions(suppress=True)

model = tf.keras.models.load_model('model_efficientnetv2.hdf5')

class_names = ['safe driving', 'texting-right', 'calling-right', 'texting-left', 'calling-left', 'operating radio', 'drinking', 'reaching behind']

#data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)

size = (224, 224)


cap = cv2.VideoCapture(0)

while cap.isOpened():

   start = time.time()

   ret, img = cap.read()

   imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

   img_resized = cv2.resize(imgRGB, size)

   # Turn the image into a numpy array
   img_array = np.asarray(img_resized)

   # Normalize the image
   data = tf.expand_dims(img_array, 0)

   # run the inference
   prediction = model.predict(data)
   prediction_score = tf.nn.softmax(prediction[0])

   index = np.argmax(prediction_score)
   class_name = class_names[index]
   confidence_score = prediction[0][index]


   end = time.time()
   totalTime = end - start

   fps = 1 / totalTime
   cv2.putText(img, f'FPS: {int(fps)}', (20,450), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (255,0,0), 2)

   cv2.putText(img, class_name, (20,50), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (255,0,0), 2)
   cv2.putText(img, str(float("{:.2f}".format(confidence_score*100))) + "%", (20,100), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (255,0,0), 2)

   cv2.imshow('Classification Resized', img_resized)
   cv2.imshow('Classification Original', img)


   if cv2.waitKey(5) & 0xFF == 27:
      break


cv2.destroyAllWindows()
cap.release()